steps:
  # Verify code with sonarqube - Quality gate
  - name: 'gcr.io/$PROJECT_ID/sonar-scanner:latest'
    entrypoint: 'bash'
    args:
    - -c
    - /launch.sh -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$$SONAR_TOKEN -Dsonar.projectKey=$$SONAR_PROJECT_KEY -Dsonar.organization=$$SONAR_ORG -Dsonar.sources=./app -Dsonar.qualitygate.wait=false
    secretEnv: ['SONAR_TOKEN','SONAR_ORG','SONAR_PROJECT_KEY']
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/sharingsongs:$SHORT_SHA', '.']
  # Run unit tests
  - name: gcr.io/$PROJECT_ID/sharingsongs:$SHORT_SHA
    entrypoint: python
    args: ["-m","pytest","unit_tests.py"]
  # Push docker image and save image digest for kritis check
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/sharingsongs:$SHORT_SHA']
  # Deploy container image to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'sharingsongs',
         '--image', 'gcr.io/$PROJECT_ID/sharingsongs:$SHORT_SHA',
         '--region', 'southamerica-east1',
         '--platform', 'managed',
         '--allow-unauthenticated']
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/sonar_token/versions/1
    env: 'SONAR_TOKEN'
  - versionName: projects/$PROJECT_ID/secrets/sonar_org/versions/1
    env: 'SONAR_ORG'
  - versionName: projects/$PROJECT_ID/secrets/sonar_project_key/versions/1
    env: 'SONAR_PROJECT_KEY'
